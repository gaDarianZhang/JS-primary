一、运算符和表达式
	
	2、赋值    把 = 右边的值  赋值给 = 左边的变量    = 左边一定是变量

		var a = 1
		var b = 2;

		a = b;
	
		a = a + b;

		=   
		+=  -=  *=  /=  %=   复合赋值运算符    a+=b   ===   a = a + b;





	3、比较（条件运算符） 和 表达式 
		>  <  >=  <=  ==  !=  ===  !==
		
		==          判断的是值是否一致
		=== 	    判断的是类型和值是否都一致  都一致才会为true  

	4、逻辑运算符   通常用在多个条件表达式的连接
		&&  ||  !

		&&  放在两个值    && 前面为真 整个表达式的值是后面的值   前面如果是假，整个表达式的值是前面的值
		a  = 0 && 100;

		||  放在两个值    || 前面为真 整个表达式的值是前面的值   前面如果是假，整个表达式的值是后面的值


		通常情况下  && || ！都是和条件运算表达式在一起使用
		&&   一假则假
		||   一真则真
		！   非真即假  非假即真
				

	5、三目运算符   三元    问号冒号表达式
		? :
		a > 0 ? 10 : 100; 
		先执行第一个表达式（也就是？前面的表达式），看看这个表达式是否为真

		如果第一个表达式的值为真，那么把冒号前面的值，赋值给整个表达式
		如果第一个表达式的值为假，那么把冒号后面的值，赋值给整个表达式；



二、数据类型转换
	1、数据类型强制转换（显式）
		Number()  强制将一个其它类型数据转化为数字类型，转不了就是NaN(值是NaN,但还是number类型的)

			通常情况下是用来转字符串的
				如果字符串整体来看是一个数字，那么就转化为这个数字
				如果字符串整体来看不是一个数字，那么就转化为NaN
				如果字符串是一个特殊的空字符串或者空白字符串，那么转化为0


			转化boolean   true会转化为1   false 会转化为0

			转化undefined   undefined  会转化为NaN

			转化null        null       会转化为0  
			
		String()    强制将一个其它类型数据转化为字符串类型

			转化字符串没有什么特殊，只要给我东西，那么就会把这个东西原样变为字符串输出；
	

		Boolean()  强制将一个其它类型数据转化为boolean类型

			转化数字的时候，除了0是false,其余都是true;
			转化字符串的时候，除了空字符串是false,其余都是true
			转化undefined和null都是false;
		

	2、数据类型隐式转换
		各种类型在适当的场合会发生隐式转换

		var a = 5;
		var b = a + 9;


		var b = a + false;
		
		主要是运算和条件判断过程中


	3、数据类型手动转换（其实就是在字符串当中提取数字）
		parseInt()
		parseFloat()


	

三、 基本数据运算（表达式的值）
	1、同种数据类型运算和比较    
		数字和数字
			小数运算的时候不准
			数字能表示的最大值
			1/0   0/1   0/0  分别是多少
			比较
			
						
		字符串和字符串      字符串有数字型的字符串和不是数字型的,还有空字符串
			+
			-
			*
			/
			比较

		boolean和boolean
			+
       	 		-
        		*
        		/
			比较

		Undefined和undefined
	    		+
			-
			*
			/
			比较

		null和null
			+
			-
			*
			/
			比较



	2、不同数据类型运算和比较  字符串有数字型的字符串和不是数字型的

		数字和字符串           + - * /  比较
		数字和boolean          + - * /  比较
		数字和undefined       + - * /  比较
		数字和null            + - * /  比较
	
		字符串和boolean       + - * /  比较
		字符串和undefined     + - * /  比较
		字符串和null          + - * /  比较
	
		Bool和undefined       + - * /  比较
		Bool和null            + - * /  比较
	
		Undefined和null       + - * /  比较




	//特殊情况：
//			当遇到null的时候;会有特殊情况发生;
//			特殊情况：空串和null不相等
//			特殊情况：false和null不相等
//			特殊情况: 0和null不相等
//			特殊情况：undefined 和 null 相等；

	在其余的情况下：只要是不同的基本数据类型进行运算和比较：
		第一步：先看是不是 +
			如果是+   看有没有字符串，如果有 就是拼接字符串

		第二步：再看是不是比较
			如果是比较  看是不是两边都是字符串   如果是 比较的是字符串的Unicode码


		最后：  全部转数字





小面试题：

	怎么快速将一个字符串‘23’转化为数字23      '23' - 0;
		Number('23');
		'23' - 0;
		parseInt('23');
		parseFloat('23');






	
		


作业：晚自习强化练习至少2题
	1、字符串拼接：个人简介
		我的名字叫XXX,性别XXX,我来自XXX,我的业余爱好是XXX,我学习后的期望薪资是XXX K;

	2、数据类型转换（课堂案例）
		所有的基本数据类型进行运算和比较

